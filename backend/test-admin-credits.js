const { Pool } = require('pg');
require('dotenv').config();

async function testAdminCredits() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:ZYTuUEyXUgNzuSqMYjEwloTlPmJKPCYh@hopper.proxy.rlwy.net:20520/railway',
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    console.log('üîç TESTANDO CR√âDITOS DO ADMIN (rodyrodrigo@gmail.com)');
    console.log('=' .repeat(60));
    
    const adminEmail = 'rodyrodrigo@gmail.com';
    
    // 1. Buscar usu√°rio admin
    console.log('üë§ 1. BUSCANDO USU√ÅRIO ADMIN:');
    const userResult = await pool.query(
      'SELECT id, email, role, first_name, last_name FROM users WHERE email = $1',
      [adminEmail]
    );
    
    if (userResult.rows.length === 0) {
      console.log('‚ùå Usu√°rio admin n√£o encontrado!');
      return;
    }
    
    const admin = userResult.rows[0];
    console.log(`   ‚úÖ Admin encontrado: ${admin.first_name} ${admin.last_name}`);
    console.log(`   üìß Email: ${admin.email}`);
    console.log(`   üëë Role: ${admin.role}`);
    console.log(`   üÜî ID: ${admin.id}`);
    
    // 2. Verificar cr√©ditos na tabela user_credits
    console.log('\nüí∞ 2. CR√âDITOS NA TABELA user_credits:');
    const creditsResult = await pool.query(
      'SELECT * FROM user_credits WHERE user_id = $1',
      [admin.id]
    );
    
    if (creditsResult.rows.length > 0) {
      const credits = creditsResult.rows[0];
      console.log(`   ‚úÖ Cr√©ditos encontrados: ${credits.credits}`);
      console.log(`   üìã Plano: ${credits.plan}`);
      console.log(`   üìÖ Criado em: ${credits.created_at}`);
      console.log(`   üìÖ Atualizado em: ${credits.updated_at}`);
    } else {
      console.log('   ‚ùå Cr√©ditos N√ÉO encontrados na tabela user_credits');
    }
    
    // 3. Verificar cr√©ditos na tabela simple_users (se existir)
    console.log('\nüí≥ 3. CR√âDITOS NA TABELA simple_users:');
    try {
      const simpleUserResult = await pool.query(
        'SELECT credits FROM simple_users WHERE email = $1',
        [adminEmail]
      );
      
      if (simpleUserResult.rows.length > 0) {
        const simpleUser = simpleUserResult.rows[0];
        console.log(`   ‚úÖ Cr√©ditos em simple_users: ${simpleUser.credits}`);
      } else {
        console.log('   ‚ùå Usu√°rio N√ÉO encontrado na tabela simple_users');
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Tabela simple_users pode n√£o existir:', error.message);
    }
    
    // 4. Verificar se admin tem 10.000 cr√©ditos como deveria
    console.log('\nüéØ 4. VERIFICA√á√ÉO FINAL:');
    if (creditsResult.rows.length > 0) {
      const currentCredits = creditsResult.rows[0].credits;
      if (currentCredits === 10000) {
        console.log('   ‚úÖ PERFEITO! Admin tem exatamente 10.000 cr√©ditos');
      } else if (currentCredits > 9000) {
        console.log(`   ‚ö†Ô∏è  Admin tem ${currentCredits} cr√©ditos (quase 10k, pode ter usado alguns)`);
      } else {
        console.log(`   ‚ùå PROBLEMA! Admin tem apenas ${currentCredits} cr√©ditos (deveria ter 10.000)`);
      }
    }
    
    console.log('\nüìä RESUMO:');
    console.log(`   üë§ Usu√°rio: ${admin.email} (ID: ${admin.id})`);
    console.log(`   üëë Role: ${admin.role}`);
    console.log(`   üí∞ Cr√©ditos: ${creditsResult.rows.length > 0 ? creditsResult.rows[0].credits : 'N√ÉO ENCONTRADO'}`);
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    pool.end();
  }
}

testAdminCredits();