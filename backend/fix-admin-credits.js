const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL || 'postgresql://postgres:ZYTuUEyXUgNzuSqMYjEwloTlPmJKPCYh@hopper.proxy.rlwy.net:20520/railway',
  ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
});

async function fixAdminCredits() {
  try {
    console.log('üîß CORRIGINDO CR√âDITOS DO ADMIN victormagalhaesg@gmail.com');
    console.log('=' .repeat(70));
    
    const adminEmail = 'victormagalhaesg@gmail.com';
    
    // 1. Verificar usu√°rio em simple_users
    console.log('üîç 1. Verificando usu√°rio em simple_users...');
    const simpleUser = await pool.query(
      'SELECT id, email, role, credits FROM simple_users WHERE email = $1',
      [adminEmail]
    );
    
    if (simpleUser.rows.length > 0) {
      const user = simpleUser.rows[0];
      console.log(`   ‚úÖ Encontrado em simple_users:`);
      console.log(`   - ID: ${user.id}`);
      console.log(`   - Email: ${user.email}`);
      console.log(`   - Role: ${user.role}`);
      console.log(`   - Cr√©ditos atuais: ${user.credits}`);
      
      if (user.role === 'admin' && user.credits !== 10000) {
        console.log('\nüîß 2. Corrigindo cr√©ditos do admin...');
        await pool.query(
          'UPDATE simple_users SET credits = $1 WHERE email = $2',
          [10000, adminEmail]
        );
        console.log('   ‚úÖ Cr√©ditos atualizados para 10.000!');
        
        // Verificar se foi atualizado
        const updatedUser = await pool.query(
          'SELECT credits FROM simple_users WHERE email = $1',
          [adminEmail]
        );
        console.log(`   ‚úÖ Confirmado: Cr√©ditos agora s√£o ${updatedUser.rows[0].credits}`);
      } else if (user.role === 'admin' && user.credits === 10000) {
        console.log('\n‚úÖ Cr√©ditos j√° est√£o corretos (10.000) para o admin!');
      } else {
        console.log(`\n‚ö†Ô∏è  Usu√°rio n√£o √© admin (role: ${user.role})`);
      }
    } else {
      console.log('   ‚ùå Usu√°rio n√£o encontrado em simple_users');
    }
    
    // 2. Verificar usu√°rio em users (tabela antiga)
    console.log('\nüîç 3. Verificando usu√°rio em users (tabela antiga)...');
    const oldUser = await pool.query(
      'SELECT id, email, role FROM users WHERE email = $1',
      [adminEmail]
    );
    
    if (oldUser.rows.length > 0) {
      console.log(`   ‚úÖ Encontrado em users: ${oldUser.rows[0].email}, role: ${oldUser.rows[0].role}`);
    } else {
      console.log('   ‚ùå Usu√°rio n√£o encontrado em users');
    }
    
    // 3. Verificar log de uso de cr√©ditos recente
    console.log('\nüîç 4. √öltimas 5 opera√ß√µes de cr√©dito...');
    const recentUsage = await pool.query(`
      SELECT user_id, search_type, credits_used, search_query, timestamp 
      FROM usage_log 
      WHERE user_id = (SELECT id FROM simple_users WHERE email = $1)
      ORDER BY timestamp DESC 
      LIMIT 5
    `, [adminEmail]);
    
    if (recentUsage.rows.length > 0) {
      console.log('   üìã √öltimas opera√ß√µes:');
      recentUsage.rows.forEach((log, index) => {
        console.log(`   ${index + 1}. ${log.search_type} - ${log.credits_used} cr√©ditos - ${log.timestamp}`);
        if (log.search_query) {
          console.log(`      Query: ${log.search_query.substring(0, 100)}...`);
        }
      });
    } else {
      console.log('   ‚ùå Nenhum log de uso encontrado');
    }
    
    // 4. Investigar poss√≠vel bug
    console.log('\nüîç 5. Investigando poss√≠veis bugs no sistema de cr√©ditos...');
    
    // Verificar se h√° alguma l√≥gica que reduz cr√©ditos incorretamente
    console.log('   üìã Sugest√µes para prevenir o bug:');
    console.log('   - ‚úÖ Admin deve ter cr√©ditos ilimitados (n√£o serem decrementados)');
    console.log('   - ‚úÖ Verificar se middleware checkUserAccess est√° correto');
    console.log('   - ‚úÖ Verificar se endpoint de busca n√£o decrementa cr√©ditos para admin');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await pool.end();
  }
}

fixAdminCredits();