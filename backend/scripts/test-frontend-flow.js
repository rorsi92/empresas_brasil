// Usando fetch nativo do Node.js (18+)

async function testFrontendFlow() {
  console.log('üß™ TESTANDO FLUXO COMPLETO FRONTEND ‚Üí BACKEND');
  console.log('='.repeat(50));
  
  try {
    // 1. Simular login
    console.log('üîê 1. Testando login...');
    const loginResponse = await fetch('http://localhost:6000/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        email: 'rodyrodrigo@gmail.com',
        password: '123456'
      })
    });
    
    const loginData = await loginResponse.json();
    console.log('   ‚úÖ Login:', loginData.success ? 'SUCCESS' : 'FAIL');
    console.log('   üë§ User role:', loginData.user?.role);
    
    if (!loginData.success) {
      console.log('   ‚ùå Login failed, stopping test');
      return;
    }
    
    const token = loginData.token;
    
    // 2. Testar endpoint de stats como admin
    console.log('\nüìä 2. Testando endpoint admin/stats...');
    const statsResponse = await fetch('http://localhost:6000/api/admin/stats', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    const statsData = await statsResponse.json();
    console.log('   ‚úÖ Stats API:', statsData.success ? 'SUCCESS' : 'FAIL');
    console.log('   üìà Total Users:', statsData.stats?.totalUsers);
    console.log('   üÜì Free Users:', statsData.stats?.freeUsers);
    console.log('   üíé Premium Users:', statsData.stats?.premiumUsers);
    console.log('   ‚è∞ Active Trials:', statsData.stats?.activeTrials);
    
    // 3. Testar endpoint de withdrawals
    console.log('\nüí∞ 3. Testando endpoint admin/withdrawals...');
    const withdrawalsResponse = await fetch('http://localhost:6000/api/admin/withdrawals', {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    const withdrawalsData = await withdrawalsResponse.json();
    console.log('   ‚úÖ Withdrawals API:', withdrawalsData.success ? 'SUCCESS' : 'FAIL');
    console.log('   üí∏ Total withdrawals:', withdrawalsData.withdrawals?.length || 0);
    
    if (withdrawalsData.withdrawals?.length > 0) {
      console.log('   üìã Sample withdrawal:');
      const sample = withdrawalsData.withdrawals[0];
      console.log(`      - ID: ${sample.id}`);
      console.log(`      - Affiliate: ${sample.affiliateName}`);
      console.log(`      - Amount: R$ ${sample.amount}`);
      console.log(`      - Status: ${sample.status}`);
    }
    
    // 4. Testar acesso ao frontend
    console.log('\nüåê 4. Testando acesso ao frontend...');
    const frontendResponse = await fetch('http://localhost:4001');
    const frontendHtml = await frontendResponse.text();
    
    console.log('   ‚úÖ Frontend accessible:', frontendResponse.ok ? 'SUCCESS' : 'FAIL');
    console.log('   üìÑ HTML size:', frontendHtml.length, 'characters');
    console.log('   üîç Contains React:', frontendHtml.includes('react') ? 'YES' : 'NO');
    
    // 5. Resumo final
    console.log('\nüéØ RESUMO DO TESTE:');
    console.log('   ‚úÖ Backend rodando:', 'OK');
    console.log('   ‚úÖ Login funcionando:', loginData.success ? 'OK' : 'FAIL');
    console.log('   ‚úÖ Admin role presente:', loginData.user?.role === 'admin' ? 'OK' : 'FAIL');
    console.log('   ‚úÖ Stats API funcionando:', statsData.success ? 'OK' : 'FAIL');
    console.log('   ‚úÖ Withdrawals API funcionando:', withdrawalsData.success ? 'OK' : 'FAIL');
    console.log('   ‚úÖ Frontend acess√≠vel:', frontendResponse.ok ? 'OK' : 'FAIL');
    console.log('   üìä Dados dispon√≠veis:', statsData.stats?.totalUsers > 0 ? 'OK' : 'FAIL');
    
    if (statsData.success && statsData.stats?.totalUsers > 0) {
      console.log('\n‚úÖ CONCLUS√ÉO: Backend est√° funcionando perfeitamente!');
      console.log('   O problema deve estar na camada React do frontend:');
      console.log('   - useEffect n√£o est√° executando');
      console.log('   - setState n√£o est√° atualizando a UI');
      console.log('   - Componente n√£o est√° re-renderizando');
    } else {
      console.log('\n‚ùå CONCLUS√ÉO: Problema encontrado no backend');
    }
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error.message);
  }
}

testFrontendFlow();