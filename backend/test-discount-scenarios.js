const { Pool } = require('pg');
require('dotenv').config();

async function testDiscountScenarios() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:ZYTuUEyXUgNzuSqMYjEwloTlPmJKPCYh@hopper.proxy.rlwy.net:20520/railway',
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
  });

  try {
    console.log('üß™ TESTANDO CEN√ÅRIOS DE DESCONTO');
    console.log('=' .repeat(50));
    
    // Simular fun√ß√£o checkReferralTracking
    async function checkReferralTracking(referredUserId, affiliateCode) {
      if (!affiliateCode) {
        console.log('‚ùå No affiliate code provided');
        return null;
      }

      console.log(`üîç Looking for affiliate code in DB: ${affiliateCode}`);
      const affiliateResult = await pool.query(
        'SELECT id, user_id FROM affiliates WHERE affiliate_code = $1',
        [affiliateCode]
      );

      if (affiliateResult.rows.length === 0) {
        console.log(`‚ùå Affiliate code not found in database: ${affiliateCode}`);
        return null;
      }

      const affiliate = affiliateResult.rows[0];
      console.log(`‚úÖ Found affiliate: ${affiliate.id} belonging to user: ${affiliate.user_id}`);
      
      if (affiliate.user_id === referredUserId) {
        console.log('‚ùå User trying to refer themselves - blocked');
        return null;
      }

      console.log(`‚úÖ Valid referral! Affiliate ID: ${affiliate.id}`);
      return affiliate.id;
    }
    
    // Testar diferentes cen√°rios
    console.log('\nüìã CEN√ÅRIO 1: Usu√°rio diferente usando c√≥digo do Victor');
    const scenario1 = await checkReferralTracking(1, 'VICT039'); // User ID 1
    console.log('Resultado:', scenario1 ? 'DESCONTO APLICADO' : 'SEM DESCONTO');
    
    console.log('\nüìã CEN√ÅRIO 2: Victor (User ID 39) usando pr√≥prio c√≥digo');
    const scenario2 = await checkReferralTracking(39, 'VICT039'); // Victor usando pr√≥prio c√≥digo
    console.log('Resultado:', scenario2 ? 'DESCONTO APLICADO' : 'SEM DESCONTO');
    
    console.log('\nüìã CEN√ÅRIO 3: C√≥digo inexistente');
    const scenario3 = await checkReferralTracking(1, 'INEXISTENTE');
    console.log('Resultado:', scenario3 ? 'DESCONTO APLICADO' : 'SEM DESCONTO');
    
    console.log('\nüí∞ C√ÅLCULO DE DESCONTO:');
    const PLANS = {
      pro: { price: 9700 },     // R$ 97.00
      premium: { price: 14700 }, // R$ 147.00
      max: { price: 24700 }     // R$ 247.00
    };
    
    Object.entries(PLANS).forEach(([planKey, plan]) => {
      const discountAmount = Math.round(plan.price * 0.1);
      const finalPrice = plan.price - discountAmount;
      console.log(`   ${planKey.toUpperCase()}: R$ ${(plan.price/100).toFixed(2)} ‚Üí Desconto: R$ ${(discountAmount/100).toFixed(2)} ‚Üí Final: R$ ${(finalPrice/100).toFixed(2)}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    pool.end();
  }
}

testDiscountScenarios();